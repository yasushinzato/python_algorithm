# -*- coding: utf-8 -*-
"""
Created on Wed Mar  4 10:17:27 2020

クイックソート (リスト内包表記での実装)
小さい単位に分割して処理することを再帰的に繰り返す。
分割する基準となる要素の選択が重要で、うまく選べば高速に処理できるが、選んだ値によっては全く分割されず、選択ソートと同じ時間がかかる。
基準となるデータをピボット(pivot)と呼び、この実装では「リストの最初の要素」とする。
        |6|15|4|2|8|5|11|9|7|13|
       / 6より小さな要素    6より大きな要素  \
      |4|2|5|    |6|  |15|8|11|9|7|13|
   /4を基準   ↓　　　　　　　 ↓　15より小         \
  |2| |4| |5|    |6|  |8|11|9|7|13|　　|15|
    ・・・（略）
|2|　|4| |5| |6| |7|  |8| |9| |11| |13| |15|

うまく半分に分割できるピボットを選べると、マージソートと同じ O(n logn) となる。
最悪の場合は　O(n^2)　となる。
@author: 81909
"""
data = [6, 15, 4, 2, 8, 5, 11, 9, 7, 13]

def quick_sort(data):
    if len(data) <= 1:
        return data
    
    pivot = data[0]  # ピボットとしてリストの先頭を使用
    # ピボットより小さいものでリストを作る
    left = [i for i in data[1:] if i <= pivot]
    # ピボットより大きいものでリストを作る
    right = [i for i in data[1:] if i > pivot]
    
    left = quick_sort(left)
    right = quick_sort(right)
    # ソートされたものとピボットの値をあわせて返す
    return left + [pivot] + right

print(quick_sort(data))
