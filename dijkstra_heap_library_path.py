# -*- coding: utf-8 -*-
"""
Created on Thu Mar  5 10:56:06 2020

ダイクストラ法（ヒープによる優先度付きキューをライブラリを使って実装）通過地点を記録する
ある頂点に接続している頂点を候補とし、その中からコストが最も小さくなる頂点を選択することを繰り返して探索する方法

ベルマン・フォード法　はすべての辺に対して処理を繰り返すが、ダイクストラ法は選択する頂点を工夫して効率よく最短経路を探す。
       5
   ∞ ――――→ ∞
　4/|\ 　　 / ↑ \2 
 /1| \1 /3 |   \
0  |   ∞ 　1|　  ∞
3\ ↓       |  /4
   ∞ ――――→ ∞
       2
       
拡張点から調べるのは1回だけ。辺の数をmとすると O(m)。
アルゴリズム全体では O(m+n^2)
@author: 81909
"""
import heapq

def dijkstra(edges, num_v, goal):
    dist = [float('inf')] * num_v
    dist[0] = 0
    q = []
    heapq.heappush(q, [0, [0]])
    
    while len(q) > 0:
        # ヒープから取り出し
        _, u = heapq.heappop(q)
        last = u[-1]
        if last == goal:
            return u
        for i in edges[last]:
            if dist[i[0]] > dist[last] + i[1]:
                # 頂点までのコストが更新できれば更新してヒープに登録
                dist[i[0]] = dist[last] + i[1]
                heapq.heappush(q, [dist[last] + i[1], u + [i[0]]])
                
    return []

# 辺のリスト（終点とコストのリスト）
edges = [
    [[1, 4], [2, 3]],  # 頂点Aからの辺のリスト
    [[2, 1], [3, 1], [4, 5]],  # 頂点Bからの辺のリスト
    [[5, 2]],  # 頂点Cからの辺のリスト
    [[4, 3]],  # 頂点Dからの辺のリスト
    [[6, 2]],  # 頂点Eからの辺のリスト
    [[4, 1], [6, 4]],  # 頂点Fからの辺のリスト
    [] # 頂点Gからの辺のリスト
]

# 頂点の番号がリストで出力される
print(dijkstra(edges, 7, 6))